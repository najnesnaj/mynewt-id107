/*****************************************************************************/
/*!
    @file     si1143.c
    @author   Rip Mayall 

    @section LICENSE

    Software License Agreement (BSD License)

*/
/*****************************************************************************/

#include <assert.h>
#include <stdio.h>
#include <errno.h>
#include <string.h>

#include "os/mynewt.h"
#include "hal/hal_i2c.h"
#include "sensor/sensor.h"
#include "sensor/light.h"
#include "si1143/si1143.h"
#include "si1143_priv.h"
#include "log/log.h"
#include "stats/stats.h"

/* Define the stats section and records */
STATS_SECT_START(si1143_stat_section)
    STATS_SECT_ENTRY(ints_cleared)
    STATS_SECT_ENTRY(errors)
STATS_SECT_END

/* Define stat names for querying */
STATS_NAME_START(si1143_stat_section)
    STATS_NAME(si1143_stat_section, ints_cleared)
    STATS_NAME(si1143_stat_section, errors)
STATS_NAME_END(si1143_stat_section)

/* Global variable used to hold stats data */
STATS_SECT_DECL(si1143_stat_section) g_si1143stats;

#define LOG_MODULE_SI1143     (1143)
#define SI1143_INFO(...)     LOG_INFO(&_log, LOG_MODULE_SI1143, __VA_ARGS__)
#define SI1143_ERR(...)      LOG_ERROR(&_log, LOG_MODULE_SI1143, __VA_ARGS__)
static struct log _log;

/* Exports for the sensor API */
static int si1143_sensor_read(struct sensor *, sensor_type_t,
        sensor_data_func_t, void *, uint32_t);
static int si1143_sensor_get_config(struct sensor *, sensor_type_t,
        struct sensor_cfg *);

static const struct sensor_driver g_si1143_sensor_driver = {
    si1143_sensor_read,
    si1143_sensor_get_config
};

int
si1143_write8(struct sensor_itf *itf, uint8_t reg, uint32_t value)
{
    int rc;
    uint8_t payload[2] = { reg, value & 0xFF };

    struct hal_i2c_master_data data_struct = {
        .address = itf->si_addr,
        .len = 2,
        .buffer = payload
    };

    rc = hal_i2c_master_write(itf->si_num, &data_struct,
                              OS_TICKS_PER_SEC / 10, 1);
    if (rc) {
        SI1143_ERR("Failed to write 0x%02X:0x%02X with value 0x%02lX\n",
                    data_struct.address, reg, value);
        STATS_INC(g_si1143stats, errors);
    }

    return rc;
}

int
si1143_write16(struct sensor_itf *itf, uint8_t reg, uint16_t value)
{
    int rc;
    uint8_t payload[3] = { reg, value & 0xFF, (value >> 8) & 0xFF };

    struct hal_i2c_master_data data_struct = {
        .address = itf->si_addr,
        .len = 3,
        .buffer = payload
    };

    rc = hal_i2c_master_write(itf->si_num, &data_struct,
                              OS_TICKS_PER_SEC / 10, 1);
    if (rc) {
        SI1143_ERR("Failed to write @0x%02X with value 0x%02X 0x%02X\n",
                    reg, payload[0], payload[1]);
    }

    return rc;
}

int
si1143_read8(struct sensor_itf *itf, uint8_t reg, uint8_t *value)
{
    int rc;
    uint8_t payload;

    struct hal_i2c_master_data data_struct = {
        .address = itf->si_addr,
        .len = 1,
        .buffer = &payload
    };

    /* Register write */
    payload = reg;
    rc = hal_i2c_master_write(itf->si_num, &data_struct,
                              OS_TICKS_PER_SEC / 10, 1);
    if (rc) {
        SI1143_ERR("Failed to address sensor\n");
        goto err;
    }

    /* Read one byte back */
    payload = 0;
    rc = hal_i2c_master_read(itf->si_num, &data_struct,
                             OS_TICKS_PER_SEC / 10, 1);
    *value = payload;
    if (rc) {
        SI1143_ERR("Failed to read @0x%02X\n", reg);
    }

    return 0;
err:
    return rc;
}

int
si1143_read16(struct sensor_itf *itf, uint8_t reg, uint16_t *value)
{
    int rc;
    uint8_t payload[2] = { reg, 0 };

    struct hal_i2c_master_data data_struct = {
        .address = itf->si_addr,
        .len = 1,
        .buffer = payload
    };

    /* Register write */
    rc = hal_i2c_master_write(itf->si_num, &data_struct,
                              OS_TICKS_PER_SEC / 10, 1);
    if (rc) {
        SI1143_ERR("Failed to address sensor\n");
        goto err;
    }

    /* Read two bytes back */
    memset(payload, 0, 2);
    data_struct.len = 2;
    rc = hal_i2c_master_read(itf->si_num, &data_struct,
                             OS_TICKS_PER_SEC / 10, 1);
    *value = (uint16_t)payload[0] | ((uint16_t)payload[1] << 8);
    if (rc) {
        SI1143_ERR("Failed to read @0x%02X\n", reg);
        goto err;
    }

    return 0;
err:
    return rc;
}

/**
 * Enable or disables the sensor to save power
 *
 * @param The sensor interface
 * @param state  1 to enable the sensor, 0 to disable it
 *
 * @return 0 on success, non-zero on failure
 */
int
si1143_enable(struct sensor_itf *itf, uint8_t state)
{
    return si1143_write8(itf, PS_LED21,
                          state ? 0xbb :
                          0x00);
}

/**
 * Checks if the sensor in enabled or not
 *
 * @param The sensor interface
 * @param ptr to enabled
 *
 * @return 0 on success, non-zero on fialure
 */
int
si1143_get_enable(struct sensor_itf *itf, uint8_t *enabled)
{
    int rc;
    uint8_t reg;

    /* Enable the device by setting the control bit to 0x03 */
    rc =  si1143_read8(itf, PS_LED21,
                        &reg);
    if (rc) {
        goto err;
    }

    *enabled = reg & 0xbb ? 1 : 0;

    return 0;
err:
    return rc;
}

/**
 * Sets the integration time used when sampling light values.
 *
 * @param The sensor interface
 * @param int_time The integration time which can be one of:
 *                  - 0x00: 13ms
 *                  - 0x01: 101ms
 *                  - 0x02: 402ms
 *
 * @return 0 on success, non-zero on failure
 */
/*
int
si1143_set_integration_time(struct sensor_itf *itf,
                             uint8_t int_time)
{
    int rc;
    uint8_t gain;

    rc = si1143_get_gain(itf, &gain);
    if (rc) {
        goto err;
    }

    rc = si1143_write8(itf, SI1143_COMMAND_BIT | SI1143_REGISTER_TIMING,
                        int_time | gain);
    if (rc) {
        goto err;
    }

    return 0;
err:
    return rc;
}
*/
/**
 * Gets the current integration time used when sampling light values.
 *
 * @param The sensor interface
 * @param ptr to the integration time which can be one of:
 *         - 0x00: 13ms
 *         - 0x01: 101ms
 *         - 0x02: 402ms
 * @return 0 on success, non-zero on failure
 */
/*int
si1143_get_integration_time(struct sensor_itf *itf, uint8_t *itime)
{
    int rc;
    uint8_t reg;

    rc = si1143_read8(itf, SI1143_COMMAND_BIT | SI1143_REGISTER_TIMING,
                       &reg);
    if (rc) {
        goto err;
    }

    *itime = reg & 0x0F;

    return 0;
err:
    return rc;
}
*/
/**
 * Sets the gain increment used when sampling light values.
 *
 * @param The sensor interface
 * @param gain The gain increment which can be one of:
 *                  - 0x00: 1x (no gain)
 *                  - 0x10: 16x gain
 *
 * @return 0 on success, non-zero on failure
 */
int
si1143_set_gain(struct sensor_itf *itf, uint8_t gain)
{
    int rc;
    uint8_t int_time;

    if (gain > 0x04) {
        SI1143_ERR("Invalid gain value\n");
        rc = SYS_EINVAL;
        goto err;
    }
/*
    rc = si1143_get_integration_time(itf, &int_time);
    if (rc) {
        goto err;
    }
*/
    rc = si1143_write8(itf, PARAM_PS_ADC_GAIN,
                         gain);
    if (rc) {
        goto err;
    }

    return 0;
err:
    return rc;
}

/**
 * Gets the current gain increment used when sampling light values.
 *
 * @param The sensor ineterface
 * @param ptr to the gain increment which can be one of:
 *         - 0x00: 1x (no gain)
 *         - 0x10: 16x gain
 * @return 0 on success, non-zero on failure
 */
int
si1143_get_gain(struct sensor_itf *itf, uint8_t *gain)
{
    int rc;
    uint8_t reg;

    rc = si1143_read8(itf, SI1143_COMMAND_BIT | SI1143_REGISTER_TIMING,
                       &reg);
    if (rc) {
        goto err;
    }

    *gain = reg & 0xF0;

    return 0;
err:
    return rc;
}

/**
 * Gets a new data sample from the light sensor.
 *
 * @param The sensor interface
 * @param broadband The full (visible + ir) sensor output
 * @param ir        The ir sensor output
 *
 * @return 0 on success, non-zero on failure
 */
int
si1143_get_data(struct sensor_itf *itf, uint16_t *broadband, uint16_t *ir)
{
    int rc;

    *broadband = *ir = 0;
    rc = si1143_read16(itf, SI1143_COMMAND_BIT | SI1143_WORD_BIT |
                        SI1143_REGISTER_CHAN0_LOW, broadband);
    if (rc) {
        goto err;
    }
    rc = si1143_read16(itf, SI1143_COMMAND_BIT | SI1143_WORD_BIT |
                        SI1143_REGISTER_CHAN1_LOW, ir);
    if (rc) {
        goto err;
    }

    return 0;
err:
    return rc;
}

/**
 * Sets the upper and lower interrupt thresholds
 *
 * @param The sensor interface
 * @param rate    Sets the rate of interrupts to the host processor:
 *                - 0   Every ADC cycle generates interrupt
 *                - 1   Any value outside of threshold range
 *                - 2   2 integration time periods out of range
 *                - 3   3 integration time periods out of range
 *                - 4   4 integration time periods out of range
 *                - 5   5 integration time periods out of range
 *                - 6   6 integration time periods out of range
 *                - 7   7 integration time periods out of range
 *                - 8   8 integration time periods out of range
 *                - 9   9 integration time periods out of range
 *                - 10  10 integration time periods out of range
 *                - 11  11 integration time periods out of range
 *                - 12  12 integration time periods out of range
 *                - 13  13 integration time periods out of range
 *                - 14  14 integration time periods out of range
 *                - 15  15 integration time periods out of range
 * @param lower   The lower threshold
 * @param upper   The upper threshold
 *
 * @return 0 on success, non-zero on failure
 */
int
si1143_setup_interrupt(struct sensor_itf *itf, uint8_t rate, uint16_t lower,
                        uint16_t upper)
{
    int rc;
    uint8_t intval;

    /* Set lower threshold */
    rc = si1143_write16(itf, SI1143_COMMAND_BIT | SI1143_WORD_BIT |
                         SI1143_REGISTER_THRESHHOLDL_LOW, lower);
    if (rc) {
        goto err;
    }

    /* Set upper threshold */
    rc = si1143_write16(itf, SI1143_COMMAND_BIT | SI1143_WORD_BIT |
                         SI1143_REGISTER_THRESHHOLDH_LOW, upper);
    if (rc) {
        goto err;
    }

    /* Set rate */
    rc = si1143_read8(itf, SI1143_COMMAND_BIT | SI1143_REGISTER_INTERRUPT,
                       &intval);
    if (rc) {
        goto err;
    }
    /* Maintain the INTR Control Select bits */
    rate = (intval & 0xF0) | (rate & 0xF);
    rc = si1143_write8(itf, SI1143_COMMAND_BIT | SI1143_REGISTER_INTERRUPT,
                        rate);
    if (rc) {
        goto err;
    }

    return 0;
err:
    return rc;
}

/**
 * Enables or disables the HW interrupt on the device
 *
 * @param The sensor interface
 * @param enable0 to disable the interrupt, 1 to enablee it
 *
 * @return 0 on success, non-zero on failure
 */
int
si1143_enable_interrupt(struct sensor_itf *itf, uint8_t enable)
{
    int rc;
    uint8_t persist_val;

    if (enable > 1) {
        SI1143_ERR("Invalid value 0x%02X in si1143_enable_interrupt\n",
                    enable);
        rc = SYS_EINVAL;
        goto err;
    }

    /* Read the current value to maintain PERSIST state */
    rc = si1143_read8(itf, SI1143_COMMAND_BIT | SI1143_REGISTER_INTERRUPT,
                       &persist_val);
    if (rc) {
        goto err;
    }

    /* Enable (1) or disable (0)  level interrupts */
    rc = si1143_write8(itf, SI1143_COMMAND_BIT | SI1143_REGISTER_INTERRUPT,
                        ((enable & 0x01) << 4) | (persist_val & 0x0F) );
    if (rc) {
        goto err;
    }

    return 0;
err:
    return rc;
}

/**
 * Clear an asserted interrupt on the device
 *
 * @param The sensor interface
 * @return 0 on success, non-zero on failure
 */
int
si1143_clear_interrupt(struct sensor_itf *itf)
{
    int rc;
    uint8_t payload = { SI1143_COMMAND_BIT | SI1143_CLEAR_BIT };

    struct hal_i2c_master_data data_struct = {
        .address = itf->si_addr,
        .len = 1,
        .buffer = &payload
    };

    /* To clear the interrupt set the CLEAR bit in the COMMAND register */
    rc = hal_i2c_master_write(itf->si_num, &data_struct,
                              OS_TICKS_PER_SEC / 10, 1);
    if (rc) {
        goto err;
    }

    STATS_INC(g_si1143stats, ints_cleared);

    return 0;
err:
    return rc;
}

/**
 * Expects to be called back through os_dev_create().
 *
 * @param The device object associated with this luminosity sensor
 * @param Argument passed to OS device init, unused
 *
 * @return 0 on success, non-zero error on failure.
 */
int
si1143_init(struct os_dev *dev, void *arg)
{
    struct si1143 *si1143;
    struct sensor *sensor;
    int rc;

    if (!arg || !dev) {
        rc = SYS_ENODEV;
        goto err;
    }

    si1143 = (struct si1143 *) dev;

    si1143->cfg.mask = SENSOR_TYPE_ALL;

    log_register(dev->od_name, &_log, &log_console_handler, NULL, LOG_SYSLEVEL);

    sensor = &si1143->sensor;

    /* Initialise the stats entry */
    rc = stats_init(
        STATS_HDR(g_si1143stats),
        STATS_SIZE_INIT_PARMS(g_si1143stats, STATS_SIZE_32),
        STATS_NAME_INIT_PARMS(si1143_stat_section));
    SYSINIT_PANIC_ASSERT(rc == 0);
    /* Register the entry with the stats registry */
    rc = stats_register(dev->od_name, STATS_HDR(g_si1143stats));
    SYSINIT_PANIC_ASSERT(rc == 0);

    rc = sensor_init(sensor, dev);
    if (rc) {
        goto err;
    }

    /* Add the light driver */
    rc = sensor_set_driver(sensor, SENSOR_TYPE_LIGHT,
            (struct sensor_driver *) &g_si1143_sensor_driver);
    if (rc) {
        goto err;
    }

    /* Set the interface */
    rc = sensor_set_interface(sensor, arg);
    if (rc) {
        goto err;
    }

    rc = sensor_mgr_register(sensor);
    if (rc) {
        goto err;
    }

    return 0;
err:
    return rc;

}
static uint32_t
si1143_calculate_lux(uint16_t broadband, uint16_t ir, struct si1143_cfg *cfg)
{
    uint64_t chscale;
    uint64_t channel1;
    uint64_t channel0;
    uint16_t clipthreshold;
    uint64_t ratio1;
    uint64_t ratio;
    int64_t  b, m;
    uint64_t temp;
    uint32_t lux;

    switch (cfg->integration_time) {
        case SI1143_LIGHT_ITIME_13MS:
            clipthreshold = SI1143_CLIPPING_13MS;
            break;
        case SI1143_LIGHT_ITIME_101MS:
            clipthreshold = SI1143_CLIPPING_101MS;
            break;
        default:
            clipthreshold = SI1143_CLIPPING_402MS;
            break;
    }

    /* Return 65536 lux if the sensor is saturated */
    if ((broadband > clipthreshold) || (ir > clipthreshold)) {
        return 65536;
    }

    /* Get the correct scale depending on the intergration time */
    switch (cfg->integration_time) {
        case SI1143_LIGHT_ITIME_13MS:
            chscale = SI1143_LUX_CHSCALE_TINT0;
            break;
        case SI1143_LIGHT_ITIME_101MS:
            chscale = SI1143_LUX_CHSCALE_TINT1;
            break;
        default: /* No scaling ... integration time = 402ms */
            chscale = (1 << SI1143_LUX_CHSCALE);
            break;
    }

    /* Scale for gain (1x or 16x) */
    if (!cfg->gain) {
        chscale = chscale << 4;
    }

    /* Scale the channel values */
    channel0 = (broadband * chscale) >> SI1143_LUX_CHSCALE;
    channel1 = (ir * chscale) >> SI1143_LUX_CHSCALE;

    ratio1 = 0;
    /* Find the ratio of the channel values (Channel1/Channel0) */
    if (channel0 != 0) {
        ratio1 = (channel1 << (SI1143_LUX_RATIOSCALE+1)) / channel0;
    }

    /* round the ratio value */
    ratio = (ratio1 + 1) >> 1;

#if MYNEWT_VAL(SI1143_PACKAGE_CS)
    if ((ratio >= 0) && (ratio <= SI1143_LUX_K1C)) {
        b = SI1143_LUX_B1C;
        m = SI1143_LUX_M1C;
    } else if (ratio <= SI1143_LUX_K2C) {
        b = SI1143_LUX_B2C;
        m = SI1143_LUX_M2C;
    } else if (ratio <= SI1143_LUX_K3C) {
        b = SI1143_LUX_B3C;
        m = SI1143_LUX_M3C;
    } else if (ratio <= SI1143_LUX_K4C) {
        b = SI1143_LUX_B4C;
        m = SI1143_LUX_M4C;
    } else if (ratio <= SI1143_LUX_K5C) {
        b = SI1143_LUX_B5C;
        m = SI1143_LUX_M5C;
    } else if (ratio <= SI1143_LUX_K6C) {
        b = SI1143_LUX_B6C;
        m = SI1143_LUX_M6C;
    } else if (ratio <= SI1143_LUX_K7C) {
        b = SI1143_LUX_B7C;
        m = SI1143_LUX_M7C;
    } else if (ratio > SI1143_LUX_K8C) {
        b = SI1143_LUX_B8C;
        m = SI1143_LUX_M8C;
    }
#else
    if ((ratio >= 0) && (ratio <= SI1143_LUX_K1T)) {
        b = SI1143_LUX_B1T;
        m = SI1143_LUX_M1T;
    } else if (ratio <= SI1143_LUX_K2T) {
        b = SI1143_LUX_B2T;
        m = SI1143_LUX_M2T;
    } else if (ratio <= SI1143_LUX_K3T) {
        b = SI1143_LUX_B3T;
        m = SI1143_LUX_M3T;
    } else if (ratio <= SI1143_LUX_K4T) {
        b = SI1143_LUX_B4T;
        m = SI1143_LUX_M4T;
    } else if (ratio <= SI1143_LUX_K5T) {
        b = SI1143_LUX_B5T;
        m = SI1143_LUX_M5T;
    } else if (ratio <= SI1143_LUX_K6T) {
        b = SI1143_LUX_B6T;
        m = SI1143_LUX_M6T;
    } else if (ratio <= SI1143_LUX_K7T) {
        b = SI1143_LUX_B7T;
        m = SI1143_LUX_M7T;
    } else if (ratio > SI1143_LUX_K8T) {
        b = SI1143_LUX_B8T;
        m = SI1143_LUX_M8T;
    }
#endif

    temp = ((channel0 * b) - (channel1 * m));

    /* Do not allow negative lux value */
    if (temp < 0) {
        temp = 0;
    }
    /* Round lsb (2^(LUX_SCALE-1)) */
    temp += (1 << (SI1143_LUX_LUXSCALE - 1));

    /* Strip off fractional portion */
    lux = temp >> SI1143_LUX_LUXSCALE;

    return lux;
}

static int
si1143_sensor_read(struct sensor *sensor, sensor_type_t type,
        sensor_data_func_t data_func, void *data_arg, uint32_t timeout)
{
    struct si1143 *si1143;
    struct sensor_light_data sld;
    struct sensor_itf *itf;
    uint16_t full;
    uint16_t ir;
    uint32_t lux;
    int rc;

    /* If the read isn't looking for accel or mag data, don't do anything. */
    if (!(type & SENSOR_TYPE_LIGHT)) {
        rc = SYS_EINVAL;
        goto err;
    }

    itf = SENSOR_GET_ITF(sensor);
    si1143 = (struct si1143 *)SENSOR_GET_DEVICE(sensor);

    /* Get a new accelerometer sample */
    if (type & SENSOR_TYPE_LIGHT) {
        full = ir = 0;

        rc = si1143_get_data(itf, &full, &ir);
        if (rc) {
            goto err;
        }

        lux = si1143_calculate_lux(full, ir, &(si1143->cfg));
        sld.sld_full = full;
        sld.sld_ir = ir;
        sld.sld_lux = lux;

        sld.sld_full_is_valid = 1;
        sld.sld_ir_is_valid   = 1;
        sld.sld_lux_is_valid  = 1;

        /* Call data function */
        rc = data_func(sensor, data_arg, &sld, SENSOR_TYPE_LIGHT);
        if (rc != 0) {
            goto err;
        }
    }

    return 0;
err:
    return rc;
}

static int
si1143_sensor_get_config(struct sensor *sensor, sensor_type_t type,
        struct sensor_cfg *cfg)
{
    int rc;

    if ((type != SENSOR_TYPE_LIGHT)) {
        rc = SYS_EINVAL;
        goto err;
    }

    cfg->sc_valtype = SENSOR_VALUE_TYPE_INT32;

    return 0;
err:
    return rc;
}

/**
 * Configure the sensor
 *
 * @param ptr to sensor driver
 * @param ptr to sensor driver config
 */
int
si1143_config(struct si1143 *si1143, struct si1143_cfg *cfg)
{
    int rc;
    struct sensor_itf *itf;

    itf = SENSOR_GET_ITF(&(si1143->sensor));

    rc = si1143_enable(itf, 1);
    if (rc) {
        goto err;
    }

    rc = si1143_set_integration_time(itf, cfg->integration_time);
    if (rc) {
        goto err;
    }

    si1143->cfg.integration_time = cfg->integration_time;

    rc = si1143_set_gain(itf, cfg->gain);
    if (rc) {
        goto err;
    }

    si1143->cfg.gain = cfg->gain;

    rc = sensor_set_type_mask(&(si1143->sensor), cfg->mask);
    if (rc) {
        goto err;
    }

    si1143->cfg.mask = cfg->mask;

    return 0;
err:
    return rc;
}
